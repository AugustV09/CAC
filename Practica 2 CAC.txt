3_a)
        org 1000h
car     db 1

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec cl
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset car
        mov al,1
        mov cl,255
        call IMPRESION
        int 0 
        end 

b)
        org 1000h
ini     db 'A'
fin     db 'Z'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

c)VERSION 1:
        org 1000h
ini     db '0'
fin     db '9'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db '0123456789'
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

d)
        org 1000h
ini     db '0'
fin	db '9'
lf      db 10

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        mov dx,bx
        mov bx,cx
        int 7
        mov bx,dx
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,ini
	sub ah,fin
	inc ah
        mov cx,offset lf
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "0123456789"
lf      db 10

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
	inc bx
        mov dx,bx
        mov bx,cx
        int 7
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,offset lf - offset ini
        mov cx,offset lf
        call IMPRESION
        int 0 
        end 


e)
        org 1000h
ini     db 'A'
fin     db 'Z'
minus   db 'a'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        mov dx,bx
        mov bx,cx
        int 7
        inc byte ptr[bx]
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        mov cx,offset minus
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
minus   db 'a'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc bx
        mov dx,bx
        mov bx,cx
        int 7
        inc byte ptr[bx]
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,offset minus - offset de ini
        mov cx,offset minus
        call IMPRESION
        int 0 
        end 

VERSION 3:
        org 1000h
ini     db "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

4_a)
        org 1000h
num     db ?
msj     db " elefantes se balanceaban..."
fin     db ?


        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
        mov bx,offset num ; ¿Deberia poder hacer offset de num?
        add ah,'0'
        mov [bx],ah
        mov al,offset fin-offset num  ; ¿Deberia mandar esto y la direccion en BX en el programa principal?
        int 7
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov ah,9
        call IMPRESION
        int 0 
        end 

b) 
        org 1000h
X       db ?
Y       db ?
msj     db " elefantes se balanceaban..."
fin     db ?


        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
        mov bx, offset Y ; ¿Deberia poder hacer offset de Y?
        add cl,'0'
        mov [bx],cl
        mov bx,offset X ; ¿Deberia poder hacer offset de X?
        add ch,'0'
        mov [bx],ch
        mov al,offset fin-offset X  ; ¿Deberia mandar esto y la direccion en BX en el programa principal?
        int 7
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov cl,9    ; Y
        mov ch,0   ; X
        call IMPRESION
        int 0 
        end 

5_a)
    ORG 1000H
car db "AEIOUaeiou"
N   DB 1

    ORG 3000H
CONTAR_VOC:
        push ax
        push bx
        push dx
LOOP2:  mov al,[bx] ;al contiene el caracter de la palabra
        inc bx
        cmp al,00  ;me fijo que el caracter no sea cero
        jz fin2
        push bx
        mov bx,dx
        call ES_VOCAL
        cmp cl,0ffh
        jnz NO
        inc ch
NO:     pop bx
        jmp LOOP2
fin2:   pop dx
        pop bx
        pop ax
        ret



ES_VOCAL: 
        push dx
        push bx
        push ax
        mov cl,0FFh
LOOP: 
        cmp al,[bx]
        jz fin
        inc bx
        dec ah  ; ah contiene la cantidad de vocales
        jnz LOOP
        mov cl,00h  ; cl acaba indicando si el caracter es vocal o no
fin:    pop ax
        pop bx
        pop dx
        ret

leer_str_n:
    push bx
    push cx
    push ax
    push dx
    MOV DX,BX
    MOV CL,AL
BUCLE:
    int 6
    INC BX
    DEC CL
    JNZ BUCLE
    MOV BX,DX
    int 7
    pop dx
    pop ax
    pop cx
    pop bx
    ret

    ORG 2000H

    MOV BX, OFFSET N
    MOV AL,4
    CALL leer_str_n
    ADD BL,AL
    MOV BYTE PTR[BX],0
    MOV BX,OFFSET N
    mov ch,0
    mov dx,offset car
    MOV AH,OFFSET N - OFFSET CAR
    call contar_voc  ; (la funcion de cada parametros esta arriba)
    HLT
    END

