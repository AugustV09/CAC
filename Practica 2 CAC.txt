3_a)
        org 1000h
car     db 1

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec cl
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset car
        mov al,1
        mov cl,255
        call IMPRESION
        int 0 
        end 

b)
        org 1000h
ini     db 'A'
fin     db 'Z'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

c)VERSION 1:
        org 1000h
ini     db '0'
fin     db '9'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db '0123456789'
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

d)
        org 1000h
ini     db '0'
fin	db '9'
lf      db 10

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        mov dx,bx
        mov bx,cx
        int 7
        mov bx,dx
        inc byte ptr[bx]
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,ini
	sub ah,fin
	inc ah
        mov cx,offset lf
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "0123456789"
lf      db 10

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
	inc bx
        mov dx,bx
        mov bx,cx
        int 7
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,offset lf - offset ini
        mov cx,offset lf
        call IMPRESION
        int 0 
        end 


e)
        org 1000h
ini     db 'A'
fin     db 'Z'
minus   db 'a'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc byte ptr[bx]
        mov dx,bx
        mov bx,cx
        int 7
        inc byte ptr[bx]
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
        mov ah,fin
        sub ah,ini
        inc ah
        mov cx,offset minus
        call IMPRESION
        int 0 
        end 

VERSION 2:
        org 1000h
ini     db "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
minus   db 'a'

        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
loop:   int 7
        inc bx
        mov dx,bx
        mov bx,cx
        int 7
        inc byte ptr[bx]
        mov bx,dx
        dec ah
        jnz loop
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov bx,offset ini
        mov al,1
	mov ah,offset minus - offset de ini
        mov cx,offset minus
        call IMPRESION
        int 0 
        end 

VERSION 3:
        org 1000h
ini     db "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
fin	db ?

        org 2000h
        mov bx,offset ini
        mov al,offset fin - offset ini
	int 7
        int 0 
        end 

4_a)
        org 1000h
num     db ?
msj     db " elefantes se balanceaban..."
fin     db ?


        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
        mov bx,offset num ; ¿Deberia poder hacer offset de num?
        add ah,'0'
        mov [bx],ah
        mov al,offset fin-offset num  ; ¿Deberia mandar esto y la direccion en BX en el programa principal?
        int 7
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov ah,9
        call IMPRESION
        int 0 
        end 

b) 
        org 1000h
X       db ?
Y       db ?
msj     db " elefantes se balanceaban..."
fin     db ?


        org 3000h
IMPRESION:
        push bx
        push cx
        push ax
        push dx
        mov bx, offset Y ; ¿Deberia poder hacer offset de Y?
        add cl,'0'
        mov [bx],cl
        mov bx,offset X ; ¿Deberia poder hacer offset de X?
        add ch,'0'
        mov [bx],ch
        mov al,offset fin-offset X  ; ¿Deberia mandar esto y la direccion en BX en el programa principal?
        int 7
        pop dx
        pop ax
        pop cx
        pop bx
        ret


        org 2000h
        mov cl,9    ; Y
        mov ch,0   ; X
        call IMPRESION
        int 0 
        end 

5_a)
    ORG 1000H
car db "AEIOUaeiou"
N   DB 1

    ORG 3000H
CONTAR_VOC:
        push ax
        push bx
        push dx
LOOP2:  mov al,[bx] ;AL contiene el caracter de la palabra
        inc bx
        cmp al,00  ;me fijo que el caracter no sea cero
        jz fin2
        push bx
        mov bx,dx  ;DX contiene la direccion de las vocales
        call ES_VOCAL
        cmp cl,0ffh
        jnz NO
        inc ch   ;CH contiene la cantidad de vocales
NO:     pop bx
        jmp LOOP2
fin2:   pop dx
        pop bx
        pop ax
        ret



ES_VOCAL: 
        push dx
        push bx
        push ax
        mov cl,0FFh
LOOP: 
        cmp al,[bx]
        jz fin
        inc bx
        dec ah  ; AH contiene la cantidad de vocales
        jnz LOOP
        mov cl,00h  ; CL acaba indicando si el caracter es vocal o no
fin:    pop ax
        pop bx
        pop dx
        ret

leer_str_n:
    push bx
    push cx
    push ax
    push dx
    MOV DX,BX
    MOV CL,AL
BUCLE:
    int 6
    INC BX
    DEC CL
    JNZ BUCLE
    MOV BX,DX
    int 7
    pop dx
    pop ax
    pop cx
    pop bx
    ret

    ORG 2000H

    MOV BX, OFFSET N
    MOV AL,10
    CALL leer_str_n
    ADD BL,AL
    MOV BYTE PTR[BX],0
    MOV BX,OFFSET N
    mov ch,0
    mov dx,offset car
    MOV AH,OFFSET N - OFFSET CAR
    call contar_voc  ; (la funcion de cada parametros esta arriba)
    HLT
    END

b)
    ORG 1000H
car db "AEIOUaeiou"
N   DB 1


    ORG 3000H
CONTAR_VOC:
        push ax
        push bx
        push dx
LOOP2:  mov al,[bx] ;AL contiene el caracter de la palabra
        inc bx
        cmp al,00  ;me fijo que el caracter no sea cero
        jz fin2
        push bx
        mov bx,dx  ;DX contiene la direccion de las vocales
        call ES_VOCAL
        cmp cl,0ffh
        jnz NO
        inc ch   ;CH contiene la cantidad de vocales
NO:     pop bx
        jmp LOOP2
fin2:   pop dx
        pop bx
        pop ax
        ret



ES_VOCAL: 
        push dx
        push bx
        push ax
        mov cl,0FFh
LOOP: 
        cmp al,[bx]
        jz fin
        inc bx
        dec ah  ; AH contiene la cantidad de vocales
        jnz LOOP
        mov cl,00h  ; CL acaba indicando si el caracter es vocal o no
fin:    pop ax
        pop bx
        pop dx
        ret

leer_str_car:
    push bx
    push cx
    push dx
    MOV DX,BX
BUCLE:
    int 6
    CMP [BX],CH  ;Comparo el caracter recien ingresado con '.'
    JZ SEGUIR    ;Si el caracter es '.' corta y no suma a AL o BX
    INC BX
    INC AL
    JMP BUCLE
SEGUIR:
    MOV BX,DX
    int 7
    pop dx
    pop cx
    pop bx
    ret

    ORG 2000H

    MOV BX, OFFSET N
    MOV CH, '.'
    MOV AL,0  ; Esta bien que me devuelva la cantidad de caracteres de la palabra???
    CALL leer_str_car
    ADD BL,AL
    MOV BYTE PTR[BX],0
    MOV BX,OFFSET N
    mov ch,0
    mov dx,offset car
    MOV AH,OFFSET N - OFFSET CAR
    call contar_voc  ; (la funcion de cada parametros esta arriba)
    HLT
    END

6)
     ORG 1000H
L    db 10
MSJ  db "Ingresar un dígito del 0 al 9"
MSJ2 DB "Carácter inválido: solo dígitos del 0 al 9"
VEC  DB ?


    ORG 3000H
es_digito:    ; No pusheo CX porque CH devuelve si es digito o no
    push bx
    push dx
    push ax   
    mov ch,0 ; CH devuelve 1 si el codigo ASCII esta entre '0' y '9' o devuelve 0 en caso contrario
    cmp ah,'0'  ; AH tiene el caracter a evaluar si es un digito en ASCII
    js fin_es_dig
    sub ah,'9'   ; La comparacion deberia ser al reves pero no puedo y por eso esta el NEG
    neg ah
    js fin_es_dig
    mov ch,1
fin_es_dig:
    pop ax
    pop dx
    pop bx
    ret

leer_digito:    ; No pusheo CX porque CL devuelve el digito como numero
    push bx
    push dx
    push ax
bucle:
    mov dx,bx
    mov bx,offset MSJ     ; Primero imprimo el "ingrese..."
    mov al,offset MSJ2 - offset MSJ
    int 7
    mov bx,dx
    int 6
    mov ah,[bx]
    call es_digito
    cmp ch,1
    mov dx,bx
    mov bx,offset L    ; (OPCIONAL) Imprimo un salto de linea para que quede ordenado
    mov al, 1
    int 7 
    mov bx,dx
    jz fin_leer_dig
    mov dx,bx
    mov bx,offset MSJ2    ; Si el caracter no era digito, imprimo la respuesta a ello
    mov al, offset vec - offset MSJ2
    int 7
    mov bx,dx
    jmp bucle
fin_leer_dig:
    mov cl,[bx]
    sub cl,'0'    ;La resta onvierte al numero caracter en numero REAL
    pop ax
    pop dx
    pop bx
    ret

leer_vector:    ; AH contiene la cantidad de elementos del vector
    push bx      ;BX la direccion del mismo
    push cx
    push dx
    push ax
loop:
    call leer_digito
    mov [bx],cl
    inc bx
    dec ah
    jnz loop
    pop ax
    pop dx
    pop cx
    pop bx
    ret

max_num:    ; DL contiene un numero, DH otro numero y DL sale con el mayor de los 2
    push ax
    push cx
    push bx
    cmp dl,dh    ; Si la operacion da con signo, si quiero hacer el intercambio entre los numeros
    jns fin_max_num
    xor dl,dh
    xor dh,dl
    xor dl,dh
fin_max_num:
    pop bx
    pop cx
    pop ax
    ret

max_vector:    ; DL sale con el mayor numero del vector
    push cx
    push ax
    push bx
    mov dl,[bx]  ; Cargo primero en DL para aprovechar el LOOP y que despues se cargue siempre en DH y se compare con el de DL
    dec ah
seguir:
    inc bx
    mov dh,[bx]
    call max_num
    dec ah
    jnz seguir
    pop bx
    pop ax
    pop cx
    ret
    
    ORG 2000H
    mov bx,offset vec
    mov ah,20
    call leer_vector
    call max_vector
    HLT
    END

7)
     ORG 1000H
LF   db 10
MSJ  db "Acceso permitido"
MSJ2 DB "Acceso denegado"
BLOQ DB "Acceso BLOQUEADO"
COPY DB "HOLA"
PASS DB ?


    ORG 3000H
leer_contra:
    push ax
    push bx
    push cx
    push dx
    mov ch,al  ; Esta linea hace que CH tenga siempre un respaldo de AL
seguir:
    mov dx,bx  ; Copio la direccion de PASS en DX para tener un respaldo
entrada:    ; Realizo el ingreso de PASS
    int 6
    inc bx
    dec al
    jnz entrada  ; entrada continua hasta que no falten mas caracteres por ingresar
    mov al,ch  ; recupero la cantidad de caracteres de PASS
    mov bx,dx  ; recupero la direccion de PASS
    push bx    ; Me guardo el contenido de PASS (no me quedan registros)
comp_pass:
    mov dh,[bx]
    sub bl,ch    ; utilizo CH para para desplazar BX a la direccion de COPY
    mov dl,[bx]
    add bl,ch    ; Utilizo CH para hacer que BX tenga la direccion de PASS nuevamente
    inc bx
    dec al  ; AL controla que no me quede sin caracteres que comparar
    js no_comp  ; AL debe ser -1 para que salga de la comparacion (si sucede es porque las contraseñas son iguales)
    cmp dl,dh
    jz comp_pass  ; Si no salta es porque las contraseñas son diferentes
    mov bx,offset MSJ2
    mov al,offset BLOQ - offset MSJ2
    int 7    ; Imprimo "Acceso denegado"
    mov bx, offset LF
    mov al,1
    int 7    ; Imprimo un SALTO de LINEA para que haya orden
    pop bx    ;Recuperacion necesaria del avlor de BX para la siguiente vuelta
    mov al,ch  ; Recupero la cantidad de caracteres en AL para la siguiente vuelta
    dec ah
    jnz seguir
    mov bx,offset BLOQ
    mov al, offset COPY - offset BLOQ
    int 7    ; Imprimo "Acceso BLOQUEADO"
    jmp fin_leer_contra
no_comp:
    mov bx,offset MSJ
    mov al, offset MSJ2 - offset MSJ
    int 7    ; Imprimo "Acceso permitido"
    pop bx   ; Debe estar para que no se rompa el programa en caso de que la contraseña sea correcta
fin_leer_contra:
    pop dx
    pop cx
    pop bx
    pop ax
    ret 
    
    ORG 2000H
    mov bx,offset PASS  ; BX tiene la direccion de la contraseña a ingresar
    mov al,4  ; AL tiene la cantidad de caracteres a ingresar
    mov ah,5  ; AH tiene la cantidad de intentos del usuario
    call leer_contra
    HLT
    END

8_a)
  PIO   equ 30H   

        org 1000h

        org 2000h
        MOV AL,0
        OUT PIO+3,AL
        MOV AL,11000011B
        OUT PIO+1,AL
        hlt
        end

b) 
  PIO   equ 30H   ; POSICION DE PA

        org 1000h
MSJ     DB "LLAVE PRENDIDA"
MSJ2    DB "LLAVE APAGADA"
FIN     DB ?

        org 2000h
        MOV AL,80H ; ESTA PRACTICA SIRVE? aunque solo ponga el bit mas ziquierdo como de entrada, sigo recibiendo todos los bits de PA
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA TENGA EL BIT MAS SIGNIFICATIVO COMO DE ENTRADA
        IN AL,PIO
        CMP AL,0
        JNS OFF
        MOV BX, OFFSET MSJ
        MOV AL, OFFSET MSJ2 - OFFSET MSJ
        INT 7
        JMP TERMINE
OFF:    MOV BX, OFFSET MSJ2
        MOV AL, OFFSET FIN - OFFSET MSJ2
        INT 7
TERMINE:
        hlt
        end

c) 
  PIO   equ 30H   ; POSICION DE PA

        org 1000h

        org 2000h
        MOV AL,0FFH ; 
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA SEA DE ENTRADA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB SEA DE SALIDA
BUCLE:
        IN AL,PIO
        OUT PIO+1, AL
        JMP BUCLE
        hlt
        end

d)
  PIO   equ 30H   ; POSICION DE PA

        org 1000h

        org 2000h
        MOV AL,0FFH ; 
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA SEA DE ENTRADA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB SEA DE SALIDA
        MOV BL,0
BUCLE:
        INC BL    ; UTILIZO BL COMO CONTADOR HASTA LLEGAR A 11111111b
        IN AL, PIO    ; ME TRAIGO LAS LLAVES
        AND AL,BL    ; HAGO UN AND PARA CONFIRMAR QUE SE ENCIENDAN LAS LUCES QUE QUIERO
        OUT PIO+1,AL  ; PONGO EL RESULTADO DE ANTES EN PB
        CMP BL,0FFH
        JNZ BUCLE
        hlt
        end

VERSION CON INTERRUPCIONES:

  PIO   equ 30H   ; POSICION DE PA
  TIMER equ 10H   ; POSICION DEL REGISTRO CONT DEL TIMER
  
        org 40
GESTOR_IMPRESORA dw GESTOR


        ORG 3000H
GESTOR:
        INC BL    ; UTILIZO BL COMO CONTADOR HASTA LLEGAR A 11111111b
        IN AL, PIO    ; ME TRAIGO LAS LLAVES
        AND AL,BL    ; HAGO UN AND PARA CONFIRMAR QUE SE ENCIENDAN LAS LUCES QUE QUIERO
        OUT PIO+1,AL  ; PONGO EL RESULTADO DE ANTES EN PB
        MOV AL,0
        OUT TIMER,AL
        MOV AL,20H
        OUT TIMER+10H,AL
        IRET
        
        org 2000h
        CLI
        MOV AL,11111101b
        OUT TIMER+11H,AL
        MOV AL,10
        OUT TIMER+15H,AL
        MOV AL,0FFH ; 
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA SEA DE ENTRADA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB SEA DE SALIDA
        MOV BL,0
        MOV AL,1
        OUT TIMER+1,AL
        MOV AL,0
        OUT TIMER,AL
        STI
BUCLE:
        CMP BL,0FFH
        JNZ BUCLE
        hlt
        END

e)
PIO   equ 30H   ; POSICION DE PA

      
        org 1000h
bits    db  ?

        org 3000h
ROTARDER_N: ;Rotar a la derecha N veces una cadena de H bits, equivale a mover H-N posiciones a la izquierda  
        push cx
        push ax
        push bx
        push dx
        cmp ch,0
        jz fin2
LOOP2:  sub ch,8
        js operacion
        jz fin2
        jmp LOOP2
operacion:
        neg ch
        call ROTARIZQ_N
fin2:   pop dx
        pop bx
        pop ax
        pop cx
        ret

ROTARIZQ_N:
        push cx
        push ax
        push bx
        push dx
LOOP:   cmp ch,0
        jz fin
        mov cl,[bx]
        call ROTARIZQ
        dec ch
        jnz LOOP
        pop dx
        pop bx
        pop ax
        pop cx
fin:    ret
        
ROTARIZQ:
        push cx
        push ax
        push bx
        push dx
        add cl,cl
        adc cl,0
        mov [bx],cl
        pop dx
        pop bx
        pop ax
        pop cx
        ret


        org 2000h
        MOV AL,0FFH ; 
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA SEA DE ENTRADA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB SEA DE SALIDA
        MOV AL,1H
BUCLE:			; ESTE BUCLE ES PARA IR DE DERECHA A IZQUIERDA
        OUT PIO+1,AL
        ADD AL,AL
        JNZ BUCLE
        MOV AL,01000000b
BUCLE2: 		; ESTE BUCLE ES PARA IR DE IZQUIERDA A DERECHA
        OUT PIO+1,AL
        mov cl,AL
        mov ch,1
        mov bx,offset bits
        MOV [BX],AL  ; ESTA LINEA ESTA PARA RESPETAR LA ESTRUCTURA DE MI ROTAR_DERECHA PORQUE NO FUNCIONARIA
        call ROTARDER_N
        MOV AL,[BX]  ; ACTUALIZO EL CONTENIDO DE AL
        CMP AL,1H
        JNZ BUCLE2
        JMP BUCLE
        hlt
        end

9_a)
PIO   equ 30H   ; POSICION DE PA

      
        org 1000h


        org 3000h


        org 2000h
        MOV AL,11111101b ; STROBE COMO SALIDA Y BUSY COMO ENTRADA (______SB)
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA FUNCIONE COMO DEBE PARA LA IMPRESORA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB (DATOS) SEA DE SALIDA
        MOV AL,'A'
        OUT PIO+1,AL
BUCLE:
        IN AL,PIO
        AND AL,1
        JNZ BUCLE
        MOV AL, 0
        OUT PIO,AL
        MOV AL, 0FFH
        OUT PIO,AL   ; ¿POR QUE NO IMPRIME?
        hlt
        end
b)
PIO   equ 30H   ; POSICION DE PA

      
        org 1000h
MSJ     db  "ORGANIZACION Y ARQUITECTURA DE COMPUTADORAS"
FIN     DB ?

        org 3000h


        org 2000h
        MOV AL,11111101b ; STROBE COMO SALIDA Y BUSY COMO ENTRADA (______SB)
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA FUNCIONE COMO DEBE PARA LA IMPRESORA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB (DATOS) SEA DE SALIDA
        MOV BX,OFFSET MSJ
        MOV AH,OFFSET FIN- OFFSET MSJ
BUCLE:
        MOV AL,[BX]  
        OUT PIO+1,AL   ; COLOCO EL CARACTER EN PB
BUCLE2:
        IN AL,PIO
        AND AL,1   ; REVISO QUE BUSY=0 Y SINO SIGO REVISANDO HASTA QUE SEA 0
        JNZ BUCLE2
        MOV AL, 0
        OUT PIO,AL   ; SEÑAL DESCENDENTE
        MOV AL, 0FFH
        OUT PIO,AL   ; SEÑAL ASCENDENTE
        INC BX
        DEC AH
        JNZ BUCLE
        hlt
        end

c) 
PIO   equ 30H   ; POSICION DE PA

      
        org 1000h
MSJ     db  ?


        org 3000h


        org 2000h
        MOV AL,11111101b ; STROBE COMO SALIDA Y BUSY COMO ENTRADA (______SB)
        OUT PIO+2,AL ; CONFIGURO A CA PARA QUE PA FUNCIONE COMO DEBE PARA LA IMPRESORA
        MOV AL,0
        OUT PIO+3, AL ; CONFIGURO CB PARA QUE PB (DATOS) SEA DE SALIDA
        MOV AH,5
        MOV BX,OFFSET MSJ
BUCLE:
        INT 6
        MOV AL,[BX]  
        OUT PIO+1,AL   ; COLOCO EL CARACTER EN PB
BUCLE2:
        IN AL,PIO
        AND AL,1   ; REVISO QUE BUSY=0 Y SINO SIGO REVISANDO HASTA QUE SEA 0
        JNZ BUCLE2
        MOV AL, 0
        OUT PIO,AL   ; SEÑAL DESCENDENTE
        MOV AL, 0FFH
        OUT PIO,AL   ; SEÑAL ASCENDENTE
        INC BX
        DEC AH
        JNZ BUCLE
        hlt
        end

d)

10_a)Las diferencias con el ejercicio anterior son que no es necesario poner el STROBE en 0 y despues en 1 para indicar la señal descendente y ascendente, respectivamente, ya que el HANDSHAKE pone el bit de STROBE automaticamente en 0 luego de mandara a imprimir. Asimismo, el HANDSHKE por si solo lanza la impresion de lo que haya en el registro DATA cuando detecte que BUSY=0.

HANDSHAKE   equ 40H   ; POSICION DEL REGISTRO DATA DEL HANDSHAKE

      
        org 1000h
MSJ     DB  "INGENIERIA E INFORMATICA"
FIN     DB ?


        org 3000h


        org 2000h
        MOV AH,OFFSET FIN - OFFSET MSJ
        MOV BX,OFFSET MSJ
BUCLE:
        IN AL,HANDSHAKE+1    
        AND AL,1H
        JNZ BUCLE    ; REVISO QUE BUSY=0 O ESPERO HASTA QUE BUSY SEA 0
        MOV AL,[BX]
        OUT HANDSHAKE,AL   ; CARGO EL CARACTER EN EL REGISTRO DATA
                           ; (CARGAR DATA LANZA LA IMPRESION INMEDIATAMENTE SI BUSY=0 O CUANDO BUSY SE HAGA 0)
        INC BX             ; EL HANDSHAKE PONE STROBE EN 0 AUTOMATICAMENTE DESPUES DE MANDAR A IMPRIMIR
        DEC AH
        JNZ BUCLE
        hlt
        end

b)


11_a)


b)
PIO   equ 30H   ; POSICION DEL REGISTRO PA

      
        org 1000h
MSJ     DB  ?


        org 3000h


        org 2000h
        MOV AL,0FFH
        OUT PIO+2,AL  ; CONFIGURO CA PARA QUE PA SEA DE ENTRADA
        MOV AL,0
        OUT PIO+3,AL  ; CONFIGURO CB PARA QUE PB SEA DE SALIDA
        MOV BX,OFFSET MSJ
BUCLE:
        MOV AL,0FFH  
        OUT PIO+1,AL  ; LE MANDO AL DISPOSITIVO LA SEÑAL PARA INDICARLE QUE ME MANDE CARACTER
        IN AL,PIO  ; LEO EL CARACTER QUE ME MANDÓ EL DISPOSITIVO
        CMP AL,0   ; REVISO QUE EL CARACTER RECIBIDO NO SEA 0 
        JZ FIN
        MOV [BX],AL  ; SALVO EL CARACTER RECIBIDO
        INC BX  ; DEJO A BX APUNTANDO A LA SIGUIENTE POSICION EN MEMORIA
        JMP BUCLE
FIN:        
        hlt
        end
